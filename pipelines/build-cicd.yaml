variables:
  baseName: 'kafka'
  imageName: 'kafka-demo'
  resourceGroup: 'rg-kafka-spring-demo'
  azureConnection: 'conn-rg-kafka-spring-demo'
  location: 'West Europe'
  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
  - stage: Build
    displayName: Build stage
    jobs:
      - job: PackageContainerAndPublishArtifacts
        displayName: Maven Package and Publish Artifacts
        pool:
          vmImage: $(vmImageName)

        steps:
          - task: AzureResourceGroupDeployment@2
            displayName: 'Azure Deployment: Create Azure Container Registry'
            inputs:
              azureSubscription: $(azureConnection)
              resourceGroupName: $(resourceGroup)
              location: $(location)
              csmFile: '$(System.DefaultWorkingDirectory)/**/container-registry-template.json'
              overrideParameters: '-baseName "$(baseName)"'
              deploymentOutputs: registryNameOutput

          - bash: |
              VAR=`echo $REGISTRYNAMEOUTPUT | jq -r .registryName.value`
              echo "##vso[task.setvariable variable=registryName]$VAR"

          - task: Maven@3
            displayName: 'Maven $(mavenPOMFile)'
            inputs:
              mavenPomFile: 'app/pom.xml'

          - task: AzureCLI@2
            displayName: Build the image on the registry 
            inputs:
              azureSubscription: $(azureConnection)
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                  az acr build -r $REGISTRYNAME --image $(imageName):$(Build.BuildId) app

          - task: CopyFiles@2
            displayName: 'Copy ARM templates to artifact staging directory'
            inputs:
              SourceFolder: '$(System.DefaultWorkingDirectory)/infra'
              Contents: '*.json'
              TargetFolder: $(Build.ArtifactStagingDirectory)

          - upload: $(Build.ArtifactStagingDirectory)
            artifact: drop


  - stage: Deploy
    displayName: Deploy stage
    dependsOn: Build
    condition: succeeded()
    jobs:
      - deployment: ConfigureDeployLinuxWebApp
        displayName: Deploy Linux Web App
        environment: Development
        pool:
          vmImage: $(vmImageName)
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureResourceGroupDeployment@2
                  displayName: 'Azure Deployment: Configure and Deploy Web App'
                  inputs:
                    azureSubscription: $(azureConnection)
                    resourceGroupName: $(resourceGroup)
                    location: $(location)
                    csmFile: '$(Pipeline.Workspace)/**/container-webapp-template.json'
                    overrideParameters: '-baseName "$(baseName)" -imageName "$(imageName):$(Build.BuildId)"'

